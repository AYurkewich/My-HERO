import matplotlib.pyplot as plt
import numpy as np
from pandas import *
from . import SAA

def plot_frontier(r:'arr', covar:'arr2d', ax=None):
    noa = len(r)
    M = 1000
    w = np.random.uniform(0,1,(M,noa))
    w = w / w.sum(1).reshape(-1,1)
    r = r.reshape(-1,1)
    expected_return = np.dot(w,r)
    variance = np.zeros(M)
    for i in range(M):
        variance[i] = np.dot(np.dot(w[i],covar),w[i].T)
    
    std = variance**(1/2)
    
    y_min = expected_return.min()
    y_max = expected_return.max()
    y = np.linspace(y_min, y_max, 100)
    x = np.zeros_like(y)
    for i in range(len(x)):
        x[i] = SAA.mean_var_optimization(r,covar,y[i])[1] ** (1/2)
    
    if ax == None:
        ax = plt.gca()
    
    ax.scatter(std * 100,expected_return * 100,alpha=0.5)
    ax.scatter(x * 100,y * 100,marker='.',color='black')
    ax.set_xlabel('Standard Deviation (%)')
    ax.set_ylabel('Expected Return (%)')

    ax.grid()

def mark_position(price,position,marker='o'):
    k = 0
    p0 = position[k]
    fig,ax = plt.subplots(figsize=(10,5))
    
    if type(price) == DataFrame:
        s = price.price
        ax.plot(price.iloc[:,price.columns!='price'])

    else:
        s = price

    for i,p1 in enumerate(position[1:-1]):
        if p1!=p0 or i == len(position)-3:
            if p0 == 0:
                color = 'grey'
                linewidth = 1.0
            else:
                color = 'red' if p0 > 0 else 'green'
                linewidth = 3.0
            ax.plot(s.index[k:i+1],s[k:i+1],color=color,linewidth=linewidth,marker=marker)
            k = i
            p0 = position[k]
    
def mark_trade(price,position,marker='o'):
    offset = 2
    headlength = 8
    headwidth = 8
    width = 0
    plt.figure(figsize=(15,10))
    
    if type(price) == DataFrame:
        s = price.price
        plt.plot(s,marker=marker)
        plt.plot(price.iloc[:,price.columns!='price'])
    else:
        s = price
        plt.plot(s)


    for i in range(1,len(position)):
        if position[i-1] != position[i]:
            x = s.index[i]
            y = s[i]
            if position[i] > 0:
                plt.annotate("", xy = (x, y*(1-offset/100)), xytext = (x, y*(1-2*offset/100)), arrowprops = dict(facecolor = "red", headlength = headlength, headwidth = headwidth, width = width))  
            elif position[i] < 0:
                plt.annotate("", xy = (x, y*(1+offset/100)), xytext = (x, y*(1+2*offset/100)), arrowprops = dict(facecolor = "lightgreen", headlength = headlength, headwidth = headwidth, width = width))  
            else:   #position[i] == 0
                if position[i-1] < 0:
                    plt.annotate("", xy = (x, y*(1-offset/100)), xytext = (x, y*(1-2*offset/100)), arrowprops = dict(facecolor = "lightgreen", headlength = headlength, headwidth = headwidth, width = width))  
                else:
                    plt.annotate("", xy = (x, y*(1+offset/100)), xytext = (x, y*(1+2*offset/100)), arrowprops = dict(facecolor = "red", headlength = headlength, headwidth = headwidth, width = width))  


def mark(price,position,marker = 'o',mtype = 'trade',tail = 0):
    if tail > 0:
        p = price.tail(tail).copy()
        pos = position.tail(tail).copy()
    else:
        p = price.copy()
        pos = position.copy()
    if mtype == 'trade':
        mark_trade(p,pos,marker=marker)
    else:
        mark_position(p,pos,market=marker)
    
    
